}
}
#get_exchange_rates_with_date_range("22.12.2022", "22.12.2022")
get_exchange_rates_with_single_date("23.12.2022")
# https://www.tcmb.gov.tr/kurlar/kurlar_tr.html (main link)
is_date_check <- function(date, date_name) {
if (is.na(date) ){
str1 <- date_name
str2 <- " is not valid."
validation_text <- paste(str1,str2,sep="")
stop(validation_text)
} else {
str1 <- date_name
str2 <- " is valid."
validation_text <- paste(str1,str2,sep="")
print(validation_text)
}
}
days_diff_check <- function(days_diff) {
if (days_diff > 30 | days_diff < 0){
validation_text <- "Validation error is occured. Day differences must not be greater than 30 or lower than 0."
stop(validation_text)
} else {
validation_text <- "Date range is valid."
print(validation_text)
}
}
find_diff_of_dates <- function(start_date, end_date) {
days_diff <- end_date - start_date
return (days_diff)
}
convert_to_date <- function(date) {
date <- as.Date(date, "%d.%m.%Y")
return (date)
}
scrape_target_url <- function(date) {
#install.packages("xml2")
#install.packages("XML")
library(xml2)
library(XML)
day <- format(date, format = "%d")
month <- format(date, format = "%m")
year <- format(date, format = "%Y")
year_month <- paste(year, month, sep="")
day_month_year <- paste(day, month, year, sep="")
target_url <- sprintf("https://www.tcmb.gov.tr/kurlar/%s/%s.xml", year_month, day_month_year)
result = tryCatch({
# Read the xml file.
exchange_rates_data= read_xml(target_url)
# Parse the exchange_rate_data into R structure representing XML tree.
exchange_rates_xml <- xmlParse(exchange_rates_data)
# Convert the parsed XML to a dataframe.
df_exchange_rates <<- xmlToDataFrame(nodes=getNodeSet(exchange_rates_xml, "//Currency")) # Global variable.
df_exchange_rates$Date <- format(date, "%d.%m.%Y")
}, warning = function(w) {
print(paste("Warning text:", w, "Date:", date, sep=" "))
}, error = function(e) {
is_include <- grepl("404", e, fixed = TRUE)
df_exchange_rates <<- NULL # Global variable.
if (!is_include){
print(paste("Error text:", e, "Date:", date, sep=" "))
}
}, finally = {
return (df_exchange_rates)
})
}
get_exchange_rates_with_date_range <- function(start_date, end_date) {
start_date <- convert_to_date(start_date)
end_date <- convert_to_date(end_date)
is_date_check(start_date, "Start date")
is_date_check(end_date, "End date")
days_diff <- find_diff_of_dates(start_date, end_date)
days_diff_check(days_diff)
df_result_exchange_rates <- data.frame()
for (added_day in 0:days_diff) {
df_exchange_rates <- scrape_target_url(start_date + added_day)
if (is.null(df_exchange_rates)){
next
}
df_result_exchange_rates <- rbind(df_result_exchange_rates, df_exchange_rates)
}
if (is.null(df_exchange_rates)){
print(paste("There is no data on", start_date, end_date, sep=" "))
} else {
# View(df_result_exchange_rates)
return (df_result_exchange_rates)
}
}
get_exchange_rates_with_single_date <- function(date) {
date <- convert_to_date(date)
print(date)
is_date_check(date, "Date")
df_exchange_rates <- scrape_target_url(date)
if (is.null(df_exchange_rates)){
print(paste("There is no data on", date, sep=" "))
} else {
# View(df_exchange_rates)
return (df_exchange_rates)
}
}
#get_exchange_rates_with_date_range("22.12.2022", "22.12.2022")
get_exchange_rates_with_single_date("23.12.2022")
# https://www.tcmb.gov.tr/kurlar/kurlar_tr.html (main link)
is_date_check <- function(date, date_name) {
if (is.na(date) ){
str1 <- date_name
str2 <- " is not valid."
validation_text <- paste(str1,str2,sep="")
stop(validation_text)
} else {
str1 <- date_name
str2 <- " is valid."
validation_text <- paste(str1,str2,sep="")
print(validation_text)
}
}
days_diff_check <- function(days_diff) {
if (days_diff > 30 | days_diff < 0){
validation_text <- "Validation error is occured. Day differences must not be greater than 30 or lower than 0."
stop(validation_text)
} else {
validation_text <- "Date range is valid."
print(validation_text)
}
}
find_diff_of_dates <- function(start_date, end_date) {
days_diff <- end_date - start_date
return (days_diff)
}
convert_to_date <- function(date) {
date <- as.Date(date, "%d.%m.%Y")
return (date)
}
scrape_target_url <- function(date) {
#install.packages("xml2")
#install.packages("XML")
library(xml2)
library(XML)
day <- format(date, format = "%d")
month <- format(date, format = "%m")
year <- format(date, format = "%Y")
year_month <- paste(year, month, sep="")
day_month_year <- paste(day, month, year, sep="")
target_url <- sprintf("https://www.tcmb.gov.tr/kurlar/%s/%s.xml", year_month, day_month_year)
result = tryCatch({
# Read the xml file.
exchange_rates_data= read_xml(target_url)
# Parse the exchange_rate_data into R structure representing XML tree.
exchange_rates_xml <- xmlParse(exchange_rates_data)
# Convert the parsed XML to a dataframe.
df_exchange_rates <<- xmlToDataFrame(nodes=getNodeSet(exchange_rates_xml, "//Currency")) # Global variable.
df_exchange_rates$Date <- format(date, "%d.%m.%Y")
}, warning = function(w) {
print(paste("Warning text:", w, "Date:", date, sep=" "))
}, error = function(e) {
is_include <- grepl("404", e, fixed = TRUE)
df_exchange_rates <<- NULL # Global variable.
if (!is_include){
print(paste("Error text:", e, "Date:", date, sep=" "))
}
}, finally = {
return (df_exchange_rates)
})
}
get_exchange_rates_with_date_range <- function(start_date, end_date) {
start_date <- convert_to_date(start_date)
end_date <- convert_to_date(end_date)
is_date_check(start_date, "Start date")
is_date_check(end_date, "End date")
days_diff <- find_diff_of_dates(start_date, end_date)
days_diff_check(days_diff)
df_result_exchange_rates <- data.frame()
for (added_day in 0:days_diff) {
df_exchange_rates <- scrape_target_url(start_date + added_day)
if (is.null(df_exchange_rates)){
next
}
df_result_exchange_rates <- rbind(df_result_exchange_rates, df_exchange_rates)
}
if (is.null(df_exchange_rates)){
print(paste("There is no data on", start_date, end_date, sep=" "))
} else {
# View(df_result_exchange_rates)
return (df_result_exchange_rates)
}
}
get_exchange_rates_with_single_date <- function(date) {
date <- convert_to_date(date)
print(date)
is_date_check(date, "Date")
df_exchange_rates <- scrape_target_url(date)
if (is.null(df_exchange_rates)){
print(paste("There is no data on", date, sep=" "))
} else {
# View(df_exchange_rates)
return (df_exchange_rates)
}
}
#get_exchange_rates_with_date_range("22.12.2022", "22.12.2022")
get_exchange_rates_with_single_date("23.12.2022")
date <- convert_to_date(date)
View(convert_to_date)
function(date) {
date <- as.Date(date, "%d.%m.%Y")
return (date)
}
date <- as.Date(date, "%d.%m.%Y")
x = "12.05.2022"
y = as.Date(x, "%d.%m.%Y")
# https://www.tcmb.gov.tr/kurlar/kurlar_tr.html (main link)
is_date_check <- function(date, date_name) {
if (is.na(date) ){
str1 <- date_name
str2 <- " is not valid."
validation_text <- paste(str1,str2,sep="")
stop(validation_text)
} else {
str1 <- date_name
str2 <- " is valid."
validation_text <- paste(str1,str2,sep="")
print(validation_text)
}
}
days_diff_check <- function(days_diff) {
if (days_diff > 30 | days_diff < 0){
validation_text <- "Validation error is occured. Day differences must not be greater than 30 or lower than 0."
stop(validation_text)
} else {
validation_text <- "Date range is valid."
print(validation_text)
}
}
find_diff_of_dates <- function(start_date, end_date) {
days_diff <- end_date - start_date
return (days_diff)
}
convert_to_date <- function(date) {
date <- as.Date(date, "%d.%m.%Y")
return (date)
}
scrape_target_url <- function(date) {
#install.packages("xml2")
#install.packages("XML")
library(xml2)
library(XML)
day <- format(date, format = "%d")
month <- format(date, format = "%m")
year <- format(date, format = "%Y")
year_month <- paste(year, month, sep="")
day_month_year <- paste(day, month, year, sep="")
target_url <- sprintf("https://www.tcmb.gov.tr/kurlar/%s/%s.xml", year_month,
day_month_year)
result = tryCatch({
# Read the xml file.
exchange_rates_data= read_xml(target_url)
# Parse the exchange_rate_data into R structure representing XML tree.
exchange_rates_xml <- xmlParse(exchange_rates_data)
# Convert the parsed XML to a dataframe.
df_exchange_rates <<- xmlToDataFrame(nodes=getNodeSet(exchange_rates_xml,
"//Currency")) # Global variable.
df_exchange_rates$Date <- format(date, "%d.%m.%Y")
}, warning = function(w) {
print(paste("Warning text:", w, "Date:", date, sep=" "))
}, error = function(e) {
is_include <- grepl("404", e, fixed = TRUE)
df_exchange_rates <<- NULL # Global variable.
if (!is_include){
print(paste("Error text:", e, "Date:", date, sep=" "))
}
}, finally = {
return (df_exchange_rates)
})
}
get_exchange_rates_with_date_range <- function(start_date, end_date) {
start_date <- convert_to_date(start_date)
end_date <- convert_to_date(end_date)
is_date_check(start_date, "Start date")
is_date_check(end_date, "End date")
days_diff <- find_diff_of_dates(start_date, end_date)
days_diff_check(days_diff)
df_result_exchange_rates <- data.frame()
for (added_day in 0:days_diff) {
df_exchange_rates <- scrape_target_url(start_date + added_day)
if (is.null(df_exchange_rates)){
next
}
df_result_exchange_rates <- rbind(df_result_exchange_rates,
df_exchange_rates)
}
if (is.null(df_exchange_rates)){
print(paste("There is no data on", format(start_date, "%d.%m.%Y"),
format(end_date, "%d.%m.%Y"), sep=" "))
} else {
# View(df_result_exchange_rates)
return (df_result_exchange_rates)
}
}
get_exchange_rates_with_single_date <- function(date) {
date <- convert_to_date(date)
is_date_check(date, "Date")
df_exchange_rates <- scrape_target_url(date)
if (is.null(df_exchange_rates)){
print(paste("There is no data on", format(date, "%d.%m.%Y"), sep=" "))
} else {
# View(df_exchange_rates)
return (df_exchange_rates)
}
}
#get_exchange_rates_with_date_range("22.12.2022", "22.12.2022")
get_exchange_rates_with_single_date("23.12.2022")
# https://www.tcmb.gov.tr/kurlar/kurlar_tr.html (main link)
is_date_check <- function(date, date_name) {
if (is.na(date) ){
str1 <- date_name
str2 <- " is not valid."
validation_text <- paste(str1,str2,sep="")
stop(validation_text)
} else {
str1 <- date_name
str2 <- " is valid."
validation_text <- paste(str1,str2,sep="")
print(validation_text)
}
}
days_diff_check <- function(days_diff) {
if (days_diff > 30 | days_diff < 0){
validation_text <- "Validation error is occured. Day differences must
not be greater than 30 or lower than 0."
stop(validation_text)
} else {
validation_text <- "Date range is valid."
print(validation_text)
}
}
find_diff_of_dates <- function(start_date, end_date) {
days_diff <- end_date - start_date
return (days_diff)
}
convert_to_date <- function(date) {
date <- as.Date(date, "%d.%m.%Y")
return (date)
}
scrape_target_url <- function(date) {
#install.packages("xml2")
#install.packages("XML")
library(xml2)
library(XML)
day <- format(date, format = "%d")
month <- format(date, format = "%m")
year <- format(date, format = "%Y")
year_month <- paste(year, month, sep="")
day_month_year <- paste(day, month, year, sep="")
target_url <- sprintf("https://www.tcmb.gov.tr/kurlar/%s/%s.xml", year_month,
day_month_year)
tryCatch({
# Read the xml file.
exchange_rates_data= read_xml(target_url)
# Parse the exchange_rate_data into R structure representing XML tree.
exchange_rates_xml <- xmlParse(exchange_rates_data)
# Convert the parsed XML to a dataframe.
df_exchange_rates <<- xmlToDataFrame(nodes=getNodeSet(exchange_rates_xml,
"//Currency")) # Global variable.
df_exchange_rates$Date <- format(date, "%d.%m.%Y")
}, warning = function(w) {
print(paste("Warning text:", w, "Date:", date, sep=" "))
}, error = function(e) {
is_include <- grepl("404", e, fixed = TRUE)
df_exchange_rates <<- NULL # Global variable.
if (!is_include){
print(paste("Error text:", e, "Date:", date, sep=" "))
}
}, finally = {
return (df_exchange_rates)
})
}
get_exchange_rates_with_date_range <- function(start_date, end_date) {
start_date <- convert_to_date(start_date)
end_date <- convert_to_date(end_date)
is_date_check(start_date, "Start date")
is_date_check(end_date, "End date")
days_diff <- find_diff_of_dates(start_date, end_date)
days_diff_check(days_diff)
df_result_exchange_rates <- data.frame()
for (added_day in 0:days_diff) {
df_exchange_rates <- scrape_target_url(start_date + added_day)
if (is.null(df_exchange_rates)){
next
}
df_result_exchange_rates <- rbind(df_result_exchange_rates,
df_exchange_rates)
}
if (is.null(df_exchange_rates)){
print(paste("There is no data on", format(start_date, "%d.%m.%Y"),
format(end_date, "%d.%m.%Y"), sep=" "))
} else {
# View(df_result_exchange_rates)
return (df_result_exchange_rates)
}
}
get_exchange_rates_with_single_date <- function(date) {
date <- convert_to_date(date)
is_date_check(date, "Date")
df_exchange_rates <- scrape_target_url(date)
if (is.null(df_exchange_rates)){
print(paste("There is no data on", format(date, "%d.%m.%Y"), sep=" "))
} else {
# View(df_exchange_rates)
return (df_exchange_rates)
}
}
get_exchange_rates_with_date_range("22.05.2022", "22.12.2022")
# https://www.tcmb.gov.tr/kurlar/kurlar_tr.html (main link)
is_date_check <- function(date, date_name) {
if (is.na(date) ){
str1 <- date_name
str2 <- " is not valid."
validation_text <- paste(str1,str2,sep="")
stop(validation_text)
} else {
str1 <- date_name
str2 <- " is valid."
validation_text <- paste(str1,str2,sep="")
print(validation_text)
}
}
days_diff_check <- function(days_diff) {
if (days_diff > 30 | days_diff < 0){
validation_text <- "Validation error is occured. Day differences must
not be greater than 30 or lower than 0."
stop(validation_text)
} else {
validation_text <- "Date range is valid."
print(validation_text)
}
}
find_diff_of_dates <- function(start_date, end_date) {
days_diff <- end_date - start_date
return (days_diff)
}
convert_to_date <- function(date) {
date <- as.Date(date, "%d.%m.%Y")
return (date)
}
scrape_target_url <- function(date) {
#install.packages("xml2")
#install.packages("XML")
library(xml2)
library(XML)
day <- format(date, format = "%d")
month <- format(date, format = "%m")
year <- format(date, format = "%Y")
year_month <- paste(year, month, sep="")
day_month_year <- paste(day, month, year, sep="")
target_url <- sprintf("https://www.tcmb.gov.tr/kurlar/%s/%s.xml", year_month,
day_month_year)
tryCatch({
# Read the xml file.
exchange_rates_data= read_xml(target_url)
# Parse the exchange_rate_data into R structure representing XML tree.
exchange_rates_xml <- xmlParse(exchange_rates_data)
# Convert the parsed XML to a dataframe.
df_exchange_rates <<- xmlToDataFrame(nodes=getNodeSet(exchange_rates_xml,
"//Currency")) # Global variable.
df_exchange_rates$Date <- format(date, "%d.%m.%Y")
}, warning = function(w) {
print(paste("Warning text:", w, "Date:", date, sep=" "))
}, error = function(e) {
is_include <- grepl("404", e, fixed = TRUE)
df_exchange_rates <<- NULL # Global variable.
if (!is_include){
print(paste("Error text:", e, "Date:", date, sep=" "))
}
}, finally = {
return (df_exchange_rates)
})
}
get_exchange_rates_with_date_range <- function(start_date, end_date) {
start_date <- convert_to_date(start_date)
end_date <- convert_to_date(end_date)
is_date_check(start_date, "Start date")
is_date_check(end_date, "End date")
days_diff <- find_diff_of_dates(start_date, end_date)
days_diff_check(days_diff)
df_result_exchange_rates <- data.frame()
for (added_day in 0:days_diff) {
df_exchange_rates <- scrape_target_url(start_date + added_day)
if (is.null(df_exchange_rates)){
next
}
df_result_exchange_rates <- rbind(df_result_exchange_rates,
df_exchange_rates)
}
if (is.null(df_exchange_rates)){
print(paste("There is no data on", format(start_date, "%d.%m.%Y"),
format(end_date, "%d.%m.%Y"), sep=" "))
} else {
# View(df_result_exchange_rates)
return (df_result_exchange_rates)
}
}
get_exchange_rates_with_single_date <- function(date) {
date <- convert_to_date(date)
is_date_check(date, "Date")
df_exchange_rates <- scrape_target_url(date)
if (is.null(df_exchange_rates)){
print(paste("There is no data on", format(date, "%d.%m.%Y"), sep=" "))
} else {
# View(df_exchange_rates)
return (df_exchange_rates)
}
}
get_exchange_rates_with_date_range("22.05.2022", "22.12.2022")
